// Powered by ialdabaoth and sarbian's ModuleManager

//ablator: as early s rcs, maybe create an optional tech
//regenerative: upgrade numÂ°2

// @PART[engine_??U*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:NEEDS[EngineCooler]
// {
	// @MODULE[EngineCoolerModule]
	// {
		// @techAblator = upgradeEngine1
		// @techRegenerative = upgradeEngine2
	// }
// }
// @PART[engine_??K*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:NEEDS[EngineCooler]
// {
	// @MODULE[EngineCoolerModule]
	// {
		// @techAblator = rcs //upgradeEngine1 //rcs
		// @techRegenerative = upgradeEngine2 //upgradeKerolox2
	// }
// }
// @PART[engine_??H*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:NEEDS[EngineCooler]
// {
	// @MODULE[EngineCoolerModule]
	// {
		// @techAblator = upgradeEngine1
		// @techRegenerative = upgradeEngine2
	// }
// }

// @PART[*]:HAS[~skinInternalConductionMult[]],[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:BEFORE[EngineCooler]
// @PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:BEFORE[EngineCooler]
// {
	// %skinInternalConductionMult = 1000000.0
	// caca = 1000000.0
// }

// work because engineCooler is run before me.
@PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:AFTER[SpaceRace]
{
	//heatConvectiveConstant = 2 //conductivity to air, default is 1
	%maxTemp = 2000
	%heatConductivity = 0.001 // remove conductivity to adjacent part. It's stupid the engine's fuel tank.
	%skinInternalConductionMult = 10000000.0 // skin temp ~= internal temp (engine increase internal temp, ablator reduce skin temp)
	%skinSkinConductionMult = 0.01
	@MODULE[ModuleEngine*]
	{
		// no need of scaling for heat production
		// it's roughly a FL-T800 for a lvt-30 / 45
		@heatProduction = 1300 
		
		// playing with numbers
		//@heatProduction = #$/mass$
		//@heatProduction *= 30 
	}
	!MODULE[EngineCoolerModule]{}
	MODULE
	{
		name = EngineCoolerModule
		nbAblator = #$/mass$
		@nbAblator *= 200 //ablator quantity is linked to the mass of the part
		techAblator = upgradeEngine1 // default value : null (available from start)
		costRegenerativePercent = 50 // default value : 50 => cost *= 1.5
		regenerativeHeat = 192 // default value : 192
		techRegenerative = upgradeEngine2 // default value : null (available from start)
		MODULE
		{
			name = ModuleAblator
			ablativeResource = Ablator
			lossExp = -10000 //reduce this to use ablator faster (flater max temp)
			lossConst = 20 
			pyrolysisLossFactor = 600 // improve this to make ablator last longer //FROM 700
			reentryConductivity = 0.001
			ablationTempThresh = 1000 //it began to ablate at 1000
		}
	}
}

// @PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:AFTER[SpaceRace]
// //:AFTER[EngineCooler]
// {
	// @MODULE[EngineCoolerModule]
	// {
		// @techAblator = upgradeEngine1
		// @techRegenerative = upgradeEngine2
	// }
// }

@PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[SolidFuel]]]:AFTER[SpaceRace]
{
	%heatConductivity = 0.01
	@MODULE[ModuleEngine*]
	{
		@heatProduction = 100
	}
}


